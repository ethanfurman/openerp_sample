#!/usr/bin/env python
from __future__ import print_function

from aenum import Enum
from dbf import Date
from openerplib import get_connection, get_records, AttrDict
from scription import *

CONFIG = '/etc/openerp/fnx.ini'

try:
    settings = OrmFile(CONFIG, section='openerp')
except Exception:
    print('WARNING: unable to process configfile; all parameters must be specified', verbose=0)
    HOST = ''
    USER = ''
    DB = ''
    PW = ''
else:
    HOST = settings.host
    USER = settings.user
    DB = settings.db
    PW = settings.pw

@Script(
        host=Spec('host where OpenERP instance is running', OPTION, default=HOST),
        db=Spec('database to use', OPTION, default=DB),
        user=Spec('login name to use', OPTION, default=USER),
        pw=Spec('password for login name', OPTION),
        )
def main(host, db, user, pw):
    if host:
        module.HOST = host
    if db:
        module.DB = db
    if user:
        module.USER = user
    if pw:
        module.PW = pw
    for req in ('HOST', 'USER', 'DB', 'PW'):
        if not module[req]:
            raise SystemExit('%r required; use --help for more info' % req)


@Command(
        shipper=Spec('the shipping company used to send the package', type=unicode.lower),
        tracking=Spec('the tracking number assigned to the package', ),
        date=Spec('date package arrived [YYYY-mm-dd]', OPTION, type=Date.fromymd),
        by=Spec('package delivered to whom', OPTION, type=unicode.title),
        )
def receive(shipper, tracking, date, by):
    """
    update the date and received-by fields for sample shipments
    """
    if not date and not by:
        abort('must specify at least one of [ DATE | BY ]')
    connect_oe()
    fields = OE.sample_request.fields_view_get()['fields']
    shippers = set([s.split('_')[0] for s, n in fields['actual_ship']['selection']])
    print('found shippers:', shippers)
    if shipper not in shippers:
        abort('shipper %r not found (possibilities: %s)' % (shipper, ', '.join([s.upper() for s in shippers])))
    records = get_records(
            OE.sample_request,
            domain=[('tracking','=',tracking)],
            fields=['id', 'actual_ship', 'user_id', 'partner_id', 'julian_date_code', 'invoice', 'production_order'],
            )
    if len(records) > 1:
        template = '{user_id[1]:<20} | {partner_id[1]:<30.30} | {julian_date_code:>7} | {invoice:>8} | {production_order:>11}'
        print('multiple records found for %r:' % tracking, file=stderr)
        print('-' * 90, file=stderr)
        print(template.format(
            user_id=(0, 'user'),
            partner_id=(0, 'partner'),
            julian_date_code='julian',
            invoice='invoice',
            production_order='prod order',
            ), file=stderr)
        print('-' * 90, file=stderr)
        for record in records:
            print(
                template.format(**record),
                file=stderr,
                )
        print('-' * 90, file=stderr)
        abort('')
    for record in records:
        if not record.actual_ship.startswith(shipper):
            print('shipper on record (%r) does not match %s' % (record.actual_ship, shipper.upper()), file=stderr)
        data = {}
        if date:
            data['received_datetime'] = str(date)
        if by:
            data['received_by'] = by
        OE.sample_request.write(record.id, data)


@Command()
def fix_qty_label():
    """
    normalize qty_label field (e.g. 4-2oz. -> 4 - 2 oz)
    """
    connect_oe()
    qty_label = OE.conn.get_model('sample.qty_label')
    records = get_records(qty_label, fields=['id', 'name'])
    for rec in records:
        if rec.name.replace(' ', '').isalpha():
            # just words, leave as-is
            continue
        label = split_label(rec.name)
        echo('%-20s  <- %s' % (label, rec.name))


OE = AttrDict()

def connect_oe():
    OE.conn = conn = get_connection(hostname=HOST, database=DB, login=USER, password=PW)
    OE.res_partner = conn.get_model('res.partner')
    OE.res_users = conn.get_model('res.users')
    OE.sample_request = conn.get_model('sample.request')

def split_label(label):
    qty = []
    size = []
    text = []
    stage = Label.qty
    for ch in label:
        if stage is Label.qty:
            if ch.isdigit() or ch == '/':
                qty.append(ch)
            else:
                stage = Label.size
        if stage is Label.size and ch in ' -xX':
            continue
        if stage is Label.size:
            if ch.isdigit() or ch in './':
                size.append(ch)
            else:
                stage = Label.text
        if stage is Label.text:
            if ch == '.':
                ch = ' '
            text.append(ch)
    if not qty:
        qty = 1
    else:
        qty = ''.join(qty)
        if '/' not in qty:
            qty = int(''.join(qty))
            if qty > 1000:
                qty = 1
                # qty = 'error'
    qty = str(qty)
    if not size:
        size = None
    else:
        size = ''.join(size)
        if '/' not in size and '.' not in size:
            size = int(''.join(size))
            if size > 1000:
                # size = 'error'
                size = 1
        size = str(size)
    if qty == '1' and size is not None:
        qty, size = size, None
    if size == '1':
        size = None
    if not text:
        text = ['']
    else:
        words = ''.join(text).lower().split()
        text = []
        for w in words:
            if w in ('#', 'lb', 'lbs'):
                text.append('lb')
            elif w.startswith('ea'):
                text.append('ea')
            elif w in ('o', 'oz', 'ounce', 'ounces'):
                text.append('oz')
            elif w in ('cs', 'case', 'cases'):
                text.append('case')
            elif w in ('bg', 'bag', 'bags'):
                text.append('bag')
            elif 'p' in w and 'k' in w and 'g' in w:
                text.append('package')
            elif 's' in w and 'l' in w and 'v' in w:
                text.append('sleeve')
            else:
                text.append(w)
        if len(text) > 1 and text[-1] == 'ea':
            text.pop()
        if len(text) and qty != '1' and text[-1] not in ('ea', 'oz') and text[-1][-1] != 's':
            text[-1] = text[-1] + 's'
    final = []
    if qty and size:
        final.extend([qty, '-', size])
    else:
        final.append(qty or size)
    final.extend(text)
    return ' '.join(final)


class Label(Enum):
    _order_ = 'qty size text'
    qty = 'qty'
    size = 'size'
    text = 'text'

Main()
